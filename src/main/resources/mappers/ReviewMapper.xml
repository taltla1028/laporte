<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ReviewMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="reviewmap"
		type="com.project.laporte.model.Review">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="reviewno"         column="reviewno" />
		<result property="prodno"           column="prodno" />
		<result property="userno"           column="userno" />
		<result property="orderno"          column="orderno" />
		<result property="title"            column="title" />
		<result property="content"          column="content" />
		<result property="easyscore"        column="easyscore" />
		<result property="benefitscore"     column="benefitscore" />
		<result property="qualityscore"     column="qualityscore" />
		<result property="funcscore"        column="funcscore" />
		<result property="appearscore"      column="appearscore" />
		<result property="avgscore"         column="avgscore" />
		<result property="recommend"        column="recommend" />
		<result property="regdate"          column="regdate" />
		<result property="editdate"         column="editdate" />
		<result property="thumbnailUrl"     column="thumbnailUrl" />
		<result property="name"             column="name" />
		<result property="catno2"           column="catno2" />
	</resultMap>
	
	<resultMap id="revcommentmap"
		type="com.project.laporte.model.RevComment">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="revcomno"         column="revcomno" />
		<result property="reviewno"         column="reviewno" />
		<result property="content"          column="content" />
		<result property="regdate"          column="regdate" />
		<result property="editdate"         column="editdate" />
	</resultMap>
	
	<resultMap id="ordermap"
		type="com.project.laporte.model.Orderlist">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="orderno"         column="orderno" />
		<result property="userno"          column="userno" />
	</resultMap>
	
	<resultMap id="orderprodmap"
		type="com.project.laporte.model.Order_prod">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="orderno"         column="orderno" />
		<result property="prodno"          column="prodno" />
	</resultMap>
	
	<resultMap id="deliverymap"
		type="com.project.laporte.model.Delivery">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="orderno"         column="orderno" />
		<result property="deliverystatus"  column="deliverystatus" />
	</resultMap>
	
	<!-- 리뷰 단일행 조회 (상세) reviewno으로 조회 -->
	<select id="selectItem"
    parameterType="com.project.laporte.model.Review"
    resultMap="reviewmap">
		SELECT * FROM review WHERE reviewno=#{reviewno}
	</select>
	
	<!-- 리뷰 다중행 조회 (전체 조회 -한상품에 대해) --> 
	<select id="selectList"
    parameterType="com.project.laporte.model.Review"
    resultMap="reviewmap">
		SELECT * FROM review WHERE prodno=#{prodno}
	</select>
	
	<!-- 리뷰 다중행 조회 (전체 조회) --> 
	<select id="selectAllList"
    parameterType="com.project.laporte.model.Review"
    resultMap="reviewmap">
		 SELECT u.name, reviewno, f.prodno, f.thumbnailurl, r.title, r.content, r.easyscore, r.benefitscore, r.qualityscore,
 		r.funcscore, r.appearscore, r.avgscore, r.recommend, r.editdate
 		FROM review r
 		INNER JOIN user u ON u.userno = r.userno
 		INNER JOIN firstimg f ON f.prodno = r.prodno
 		INNER JOIN product p ON p.prodno = r.prodno 
 		<where>
			<if test="catno2 !=0">AND p.catno2 = #{catno2}</if>
			<if test="name != null">AND u.name LIKE concat('%', #{name}, '%')</if>
			<if test="title != null">AND r.title LIKE concat('%', #{title}, '%')</if>
			<if test="prodno !=0">AND r.prodno = #{prodno}</if>
		</where>
 		ORDER BY r.editdate DESC
	</select>
	
	
	<!-- 내가 주문한 orderno 조회 -->  
    <select id="selectPurchase"
        parameterType="com.project.laporte.model.Orderlist"
        resultMap="ordermap">
		SELECT orderno FROM orderlist WHERE userno=#{userno}        
    </select>
    
    <!-- 특정한 상품을 주문 했는지 조회  -->
    <select id="selectOrder"
        parameterType="com.project.laporte.model.Order_prod"
        resultMap="orderprodmap">
		SELECT orderno FROM order_prod WHERE orderno=#{orderno} AND prodno=#{prodno}        
    </select>
    
    <!-- 리뷰에 관리자가 답변을 남겼는지 조회 -->
    <select id="selectrevcomment"
    parameterType="com.project.laporte.model.RevComment"
    resultMap="revcommentmap">
		SELECT * FROM revcomment WHERE reviewno=#{reviewno}
	</select>
    
    <!-- 특정한 상품을 주문한 주문내역의 배송상태가 배송완료인 데이터만 조회 -->
    <select id="selectDelivery"
        parameterType="com.project.laporte.model.Delivery"
        resultMap="deliverymap">
		SELECT orderno FROM delivery WHERE orderno=#{orderno} AND deliverystatus='C'   
    </select>
    
    <!-- 주문한 한 내역의 상품에 대해 리뷰를 남긴적이 있는지 조회 -->
    <select id="selectReview"
        parameterType="com.project.laporte.model.Review"
        resultMap="reviewmap">
		SELECT orderno FROM review WHERE orderno=#{orderno} AND prodno=#{prodno}       
    </select>
    
    <!-- 리뷰 작성 -->
    <insert id="insertItem"
        parameterType="com.project.laporte.model.Review"
        useGeneratedKeys="true"
        keyProperty="reviewno">
        INSERT INTO review(prodno, userno, orderno, title, content, easyscore, benefitscore,
        qualityscore, funcscore, appearscore, avgscore, recommend, regdate, editdate) VALUES(
        #{prodno}, #{userno}, #{orderno}, #{title}, #{content}, #{easyscore}, #{benefitscore},
         #{qualityscore}, #{funcscore}, #{appearscore}, #{avgscore}, #{recommend}, now(), now())
    </insert>
	
	<!-- 리뷰 수정 -->
	<update id="updateItem"
        parameterType="com.project.laporte.model.Review">
        UPDATE review SET title=#{title}, content=#{content}, 
        easyscore=#{easyscore}, benefitscore=#{benefitscore},
        qualityscore=#{qualityscore}, appearscore=#{appearscore}, avgscore=#{avgscore},
        recommend=#{recommend}, editdate=now() WHERE reviewno=#{reviewno}
    </update>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteItem"
        parameterType="com.project.laporte.model.Review">
        DELETE FROM review WHERE reviewno=#{reviewno}
    </delete>
    
    <!-- 관리자 페이지에서 리뷰 상세 조회 -->
    <select id="selectItemAdmin"
    parameterType="com.project.laporte.model.Review"
    resultMap="reviewmap">
		SELECT u.name, r.editdate, r.avgscore, r.easyscore, r.benefitscore , r.qualityscore, r.funcscore , 
		r.appearscore, r.title, r.content, r.reviewno 
		FROM review r
		INNER JOIN user u ON u.userno = r.userno
		WHERE reviewno=#{reviewno}
	</select>
	
	<!-- 관리자 페이지에서 리뷰답변이 있는지 조회 -->
    <select id="selectItAnswer"
    parameterType="com.project.laporte.model.RevComment"
    resultMap="revcommentmap">
		SELECT * FROM revcomment
		WHERE reviewno=#{reviewno}
	</select>
	
	<!-- 관리자 페이지에서 리뷰답변 다중행 조회 -->
    <select id="selectAllAnswer"
    parameterType="com.project.laporte.model.RevComment"
    resultMap="revcommentmap">
		SELECT * FROM revcomment
	</select>
	
	<!-- 관리자 리뷰 답변 작성 -->
    <insert id="insertComItem"
        parameterType="com.project.laporte.model.RevComment"
        useGeneratedKeys="true"
        keyProperty="revcomno">
        INSERT INTO revcomment(reviewno, content, regdate, editdate) VALUES(
        #{reviewno}, #{content}, now(), now())
    </insert>
	
	<!-- 관리자 리뷰 답변 수정 -->
	<update id="updateComItem"
        parameterType="com.project.laporte.model.RevComment">
        UPDATE revcomment SET content=#{content}, editdate=now() WHERE revcomno=#{revcomno}
    </update>
	
	<!-- 관리자 리뷰 답변 삭제 -->
	<delete id="deleteComItem"
        parameterType="com.project.laporte.model.RevComment">
        DELETE FROM revcomment WHERE reviewno=#{reviewno}
    </delete>
    
    
    <select id="selectCountAllAdmin"
    	parameterType="com.project.laporte.model.Review" resultType="int">
    	SELECT COUNT(*) FROM review r
    	INNER JOIN user u ON u.userno = r.userno
 		INNER JOIN firstimg f ON f.prodno = r.prodno
 		INNER JOIN product p ON p.prodno = r.prodno 
    	<where>
			<if test="catno2 !=0">AND p.catno2 = #{catno2}</if>
			<if test="name != null">AND u.name LIKE concat('%', #{name}, '%')</if>
			<if test="title != null">AND r.title LIKE concat('%', #{title}, '%')</if>
			<if test="prodno !=0">AND r.prodno = #{prodno}</if>
		</where>
    </select>
    
    
     <!-- 회원 삭제 시 회원 번호 null로 업데이트 -->
    <update id = "unsetUsernoRev"
    	parameterType = "com.project.laporte.model.User">
    	UPDATE review SET userno = null WHERE userno = #{userno} 
    </update>
	
</mapper>